var searchIndex = new Map(JSON.parse('[\
["hostlink",{"t":"CCPPPGPGPPGPPGPPPPPPPPPPPPPPPPPPPPFPPKFPPPGPPPMNNNNNNNNNNNNNNNMMMMNNNNNNNNNNNNNMNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNNMMMMMMMMMMMNNMNNMNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNMMPPPPPPGPPPPPPPPPPPPPPFGFPPPPPPFPPPGPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNHNNNNNNNNNNNNCPPPPPFFGGPPPNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNOONNNNNONNNNNNNNNNNNNNNNNNNO","n":["device","protocol","AddressOver","BadFraming","BadParity","DataBits","Device","DeviceError","Eight","EntryNumberData","Error","FCSError","Five","FlowControl","Format","FormatError","FrameLengthError","FramingError","Hardware","IllegalEntryNumber","IllegalFrameLength","InstructionNotFound","Io","IoRegisterCapacityExceeded","None","None","NotExecutable","NotExecutableInMonitorMode","NotExecutableInProgramMode","NotExecutableInRunMode","NotExecutableWithPromMounted","One","Overrun","ParityError","PlcDevice","Protocol","Serial","SerialPort","SerialPortBuilder","Seven","Six","Software","StopBits","StringConversion","TransmitDataOverrun","Two","baud_rate","baud_rate","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_to_read","bytes_to_write","clear","clear_break","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","connect","connect_with_builder","data_bits","data_bits","eq","eq","eq","eq","eq","flow_control","flow_control","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_str","hash","into","into","into","into","into","into","into","is_ok","name","open","open_native","parity","parity","partial_cmp","path","read_carrier_detect","read_clear_to_send","read_data_set_ready","read_ring_indicator","set_baud_rate","set_break","set_data_bits","set_flow_control","set_parity","set_stop_bits","set_timeout","source","status","stop_bits","stop_bits","test","timeout","timeout","to_owned","to_owned","to_owned","to_owned","to_owned","to_result","to_string","to_string","to_string","to_string","to_string","try_clone","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_data_terminal_ready","write_request_to_send","ArAreaRead","ArAreaWrite","CompoundCommand","Device","DmAreaRead","DmAreaWrite","EasyCommand","ErrorCodeBadLength","ErrorRead","ForcedReset","ForcedSet","ForcedSetResetCancel","HrAreaRead","HrAreaWrite","IllegalNodeId","IntParse","InvalidTestData","IrSrAreaRead","IrSrAreaWrite","LrAreaRead","LrAreaWrite","Message","MessageKind","MessageParams","MissingAtSymbol","MissingFcs","MissingHeaderCode","MissingNodeId","MissingTerminator","MultipleForcedSetReset","NodeId","PcModelRead","ProgramRead","ProgramWrite","ProtocolError","PvRead","PvWrite","StatusParse","StatusRead","StatusRead","StatusWrite","SvChange1","SvChange2","SvChange3","SvRead1","SvRead2","SvRead3","TcStatusRead","TcStatusWrite","Test","Test","UnknownCommand","UnknownErrorCode","as_device_error","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_device_error","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","code","default","default","deref","deref","deref_mut","eq","eq","eq","eq","eq","eq","eq","fcs","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_str","hash","hash","hash","hash","hash","into","into","into","into","into","into","into_message","kind","kind","make_status_read","make_test","new","new","new","new_unchecked","new_with_empty_params","params","parse","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","responses","serialize","set_node_id","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","FcsBytes","borrow","borrow_mut","clone","clone_into","cmp","eq","fcs","fmt","fmt","from","hash","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id","value","status","MissingMemory","MissingMode","Monitor","Program","Run","Status","StatusMemory","StatusMode","StatusParseError","UnknownMemorySize","UnknownMode","UnparsableMessage","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","eq","eq","eq","eq","error","fals","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","hash","into","into","into","into","memory","mode","parse","parse","partial_cmp","partial_cmp","partial_cmp","size","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write_protection"],"q":[[0,"hostlink"],[2,"hostlink::device"],[187,"hostlink::protocol"],[368,"hostlink::protocol::fcs"],[388,"hostlink::protocol::responses"],[389,"hostlink::protocol::responses::status"],[471,"serialport"],[472,"core::result"],[473,"hostlink::device::error"],[474,"core::cmp"],[475,"alloc::boxed"],[476,"hostlink::protocol::message"],[477,"core::time"],[478,"core::option"],[479,"core::fmt"],[480,"std::io::error"],[481,"core::str::error"],[482,"core::hash"],[483,"alloc::string"],[484,"serialport::posix::tty"],[485,"alloc::borrow"],[486,"core::convert"],[487,"core::error"],[488,"core::any"],[489,"hostlink::protocol::easy"],[490,"core::num::error"],[491,"alloc::vec"]],"i":[0,0,8,8,8,0,18,0,9,8,0,8,9,0,8,8,8,8,11,8,8,8,18,8,8,11,8,8,8,8,8,10,8,8,0,18,18,0,0,9,9,11,0,18,8,10,1,5,18,8,17,9,10,11,5,18,8,17,9,10,11,5,1,1,1,1,8,9,10,11,5,8,9,10,11,5,8,17,17,1,5,8,9,10,11,5,1,5,18,18,8,8,17,1,9,9,10,10,11,11,5,18,18,18,18,18,18,8,17,9,10,11,5,11,8,18,8,17,9,10,11,5,8,1,5,5,1,5,8,5,1,1,1,1,1,1,1,1,1,1,1,18,17,1,5,17,1,5,8,9,10,11,5,8,18,8,9,10,11,1,18,8,8,8,17,9,9,10,10,11,5,18,8,17,9,10,11,5,18,8,17,9,10,11,5,1,1,41,41,41,25,41,41,0,25,41,41,41,41,41,41,25,25,25,41,41,41,41,0,0,0,25,25,25,25,25,41,0,41,41,41,0,41,41,25,40,41,41,41,41,41,41,41,41,41,41,40,41,25,25,39,40,25,41,42,14,39,40,25,41,42,14,39,39,40,25,41,42,14,39,40,25,41,42,14,39,40,41,42,14,39,41,42,14,42,14,42,40,40,25,41,42,14,39,0,40,40,25,25,41,41,42,14,14,39,40,25,25,25,25,41,42,42,42,42,14,39,41,40,41,42,14,39,40,25,41,42,14,39,40,40,39,40,40,42,14,39,14,39,39,39,40,41,42,14,39,0,39,39,25,40,25,41,42,14,39,40,25,41,14,40,25,41,42,14,39,40,25,41,42,14,39,40,25,41,42,14,39,0,47,47,47,47,47,47,0,47,47,47,47,47,47,47,47,47,47,47,47,0,44,44,48,48,48,0,0,0,0,44,44,44,34,48,49,44,34,48,49,44,34,48,49,44,34,48,49,44,34,48,49,34,48,49,44,34,34,34,48,48,49,44,44,34,48,49,44,34,48,49,34,48,49,44,34,34,48,49,34,48,49,49,34,48,49,44,48,44,34,34,48,49,44,34,48,49,44,34,48,49,44,49],"f":"``````````````````````````````````````````````{b{{h{df}}}}{{jd}j}{ce{}{}}000000000000022{{bl}{{h{nf}}}}{b{{h{nf}}}}{A`A`}{AbAb}{AdAd}{AfAf}{jj}{{ce}n{}{}}0000{{A`A`}Ah}{{{Aj{b}}Al{B`{An}}}{{h{BbBd}}}}{{jAl{B`{An}}}{{h{BbBd}}}}{b{{h{Abf}}}}{{jAb}j}{{A`A`}Bf}{{AbAb}Bf}{{AdAd}Bf}{{AfAf}Bf}{{jj}Bf}{b{{h{Aff}}}}{{jAf}j}{{BdBh}Bj}0{{A`Bh}Bj}0{{BbBh}Bj}{{bBh}{{h{nBl}}}}{{AbBh}{{h{nBl}}}}0{{AdBh}{{h{nBl}}}}0{{AfBh}{{h{nBl}}}}0{{jBh}{{h{nBl}}}}{cc{}}{BnBd}{C`Bd}{A`Bd}{CbBd}{fBd}555555{Cd{{h{Af}}}}{{A`c}nCf}{ce{}{}}000000{A`Bf}{b{{B`{Ch}}}}{j{{h{{Aj{b}}f}}}}{j{{h{Cjf}}}}{b{{h{Clf}}}}{{jCl}j}{{A`A`}{{B`{Ah}}}}{{jc}j{{D`{{Cn{Cd}}}}}}{b{{h{Bff}}}}000{{bd}{{h{nf}}}}{b{{h{nf}}}}{{bAb}{{h{nf}}}}{{bAf}{{h{nf}}}}{{bCl}{{h{nf}}}}{{bAd}{{h{nf}}}}{{bAn}{{h{nf}}}}{Bd{{B`{Db}}}}{Bb{{h{DdBd}}}}{b{{h{Adf}}}}{{jAd}j}{Bb{{h{nBd}}}}{bAn}{{jAn}j}{ce{}{}}0000{A`{{h{nA`}}}}{cCh{}}0000{b{{h{{Aj{b}}f}}}}{c{{h{e}}}{}{}}{Cd{{h{A`c}}}{}}1{{{Dh{DfDf}}}{{h{A`c}}}{}}2{Dj{{h{Ab}}}}3{Dj{{h{Ad}}}}4444444444{cDl{}}000000{{bBf}{{h{nf}}}}0`````````````````````````````````````````````````````{Dn{{h{A`Cb}}}};;;;;;;;;;;;{Dn{{B`{A`}}}}{E`E`}{CbCb}{EbEb}{EdEd}{AlAl}{DnDn}{{ce}n{}{}}00000{{E`E`}Ah}{{EbEb}Ah}{{EdEd}Ah}{{AlAl}Ah}{{DnDn}Ah}{EbCd}{{}Ed}{{}Al}{Edc{}}{Alc{}}1{{E`E`}Bf}{{E`Dn}Bf}{{CbCb}Bf}{{EbEb}Bf}{{EdEd}Bf}{{AlAl}Bf}{{DnDn}Bf}`{{E`Bh}Bj}0{{CbBh}Bj}0{{EbBh}Bj}0{{EdBh}Bj}{{AlBh}Bj}0{{DnBh}Bj}{cc{}}{EfCb}{A`Cb}2{EhCb}3{{{Aj{Cd}}}Ed}{{{Ej{Df}}}Ed}5{CdEd}66{Cd{{h{Ebc}}}{}}{{E`c}nCf}{{Ebc}nCf}{{Edc}nCf}{{Alc}nCf}{{Dnc}nCf}{ce{}{}}00000{{E`Al}Dn}{E`Eb}{DnEb}{{}E`}{c{{h{E`Cb}}}{{El{Cd}}}}{{}Ed}{Dj{{h{AlCb}}}}{{AlEbEd}Dn}{DjAl}{{AlEb}Dn}{DnEd}{Cd{{h{DnCb}}}}{{E`E`}{{B`{Ah}}}}{{EbEb}{{B`{Ah}}}}{{EdEd}{{B`{Ah}}}}{{AlAl}{{B`{Ah}}}}{{DnDn}{{B`{Ah}}}}`{Dn{{h{{Aj{Cd}}Cb}}}}{{DnAl}n}{Cb{{B`{Db}}}}{ce{}{}}00000{cCh{}}000{c{{h{e}}}{}{}}00000000000{cDl{}}00000`33{EnEn}{{ce}n{}{}}{{EnEn}Ah}{{EnEn}Bf}{Cd{{h{EnCb}}}}{{EnBh}Bj}0{cc{}}{{Enc}nCf};{{EnEn}{{B`{Ah}}}}<;::9{EnDj}`````````````========{DdDd}{F`F`}{FbFb}{EhEh}<<<<{{DdDd}Ah}{{F`F`}Ah}{{FbFb}Ah}{{DdDd}Bf}{{F`F`}Bf}{{FbFb}Bf}{{EhEh}Bf}``{{DdBh}Bj}{{F`Bh}Bj}0{{FbBh}Bj}{{EhBh}Bj}0{cc{}}000{{Ddc}nCf}{{F`c}nCf}{{Fbc}nCf}{ce{}{}}000``{Dj{{h{F`Eh}}}}{Dj{{h{FbEh}}}}{{DdDd}{{B`{Ah}}}}{{F`F`}{{B`{Ah}}}}{{FbFb}{{B`{Ah}}}}`5555{cCh{}}0{c{{h{e}}}{}{}}{Dn{{h{Ddc}}}{}}1111111{cDl{}}000`","D":"AAb","p":[[10,"SerialPort",2,471],[1,"u32"],[5,"Error",471],[6,"Result",472],[5,"SerialPortBuilder",2,471],[6,"ClearBuffer",471],[1,"unit"],[6,"DeviceError",2,473],[6,"DataBits",2,471],[6,"StopBits",2,471],[6,"FlowControl",2,471],[6,"Ordering",474],[5,"Box",475],[5,"NodeId",187,476],[5,"Duration",477],[6,"Option",478],[5,"PlcDevice",2],[6,"Error",2,473],[1,"bool"],[5,"Formatter",479],[8,"Result",479],[5,"Error",479],[5,"Error",480],[5,"Utf8Error",481],[6,"ProtocolError",187],[1,"str"],[10,"Hasher",482],[5,"String",483],[5,"TTYPort",484],[6,"Parity",471],[6,"Cow",485],[10,"Into",486],[10,"Error",487],[5,"Status",389],[1,"char"],[1,"tuple"],[1,"u8"],[5,"TypeId",488],[5,"Message",187,476],[6,"EasyCommand",187,489],[6,"MessageKind",187,476],[5,"MessageParams",187,476],[5,"ParseIntError",490],[6,"StatusParseError",389],[5,"Vec",491],[10,"AsRef",486],[5,"FcsBytes",368],[6,"StatusMode",389],[5,"StatusMemory",389]],"r":[[5,471],[7,473],[10,473],[13,471],[37,471],[38,471],[42,471],[193,489],[208,476],[209,476],[210,476],[217,476]],"b":[[88,"impl-Display-for-Error"],[89,"impl-Debug-for-Error"],[90,"impl-Debug-for-DeviceError"],[91,"impl-Display-for-DeviceError"],[94,"impl-Display-for-DataBits"],[95,"impl-Debug-for-DataBits"],[96,"impl-Debug-for-StopBits"],[97,"impl-Display-for-StopBits"],[98,"impl-Display-for-FlowControl"],[99,"impl-Debug-for-FlowControl"],[102,"impl-From%3CError%3E-for-Error"],[103,"impl-From%3CUtf8Error%3E-for-Error"],[104,"impl-From%3CDeviceError%3E-for-Error"],[105,"impl-From%3CError%3E-for-Error"],[106,"impl-From%3CError%3E-for-Error"],[161,"impl-TryFrom%3C%26str%3E-for-DeviceError"],[163,"impl-TryFrom%3C(char,+char)%3E-for-DeviceError"],[277,"impl-PartialEq-for-EasyCommand"],[278,"impl-PartialEq%3CMessage%3E-for-EasyCommand"],[285,"impl-Debug-for-EasyCommand"],[286,"impl-Display-for-EasyCommand"],[287,"impl-Debug-for-Error"],[288,"impl-Display-for-Error"],[289,"impl-Display-for-MessageKind"],[290,"impl-Debug-for-MessageKind"],[292,"impl-Display-for-NodeId"],[293,"impl-Debug-for-NodeId"],[296,"impl-From%3CParseIntError%3E-for-Error"],[297,"impl-From%3CDeviceError%3E-for-Error"],[299,"impl-From%3CStatusParseError%3E-for-Error"],[301,"impl-From%3CBox%3Cstr%3E%3E-for-MessageParams"],[302,"impl-From%3CVec%3Cchar%3E%3E-for-MessageParams"],[304,"impl-From%3C%26str%3E-for-MessageParams"],[376,"impl-Debug-for-FcsBytes"],[377,"impl-Display-for-FcsBytes"],[427,"impl-Debug-for-StatusMode"],[428,"impl-Display-for-StatusMode"],[430,"impl-Debug-for-StatusParseError"],[431,"impl-Display-for-StatusParseError"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAE4BMgAAAAAAAwACAAcAAQAKAAIADwADABQABQAbAAQAIQAEACwAAQAxAA0AQwAMAFIABABZAAwAZwAEAHIAAQB7AAAAgQAAAI4AAQCSAAAAlQAKAKEAGAC8AAUAwwAGAM0AAwDZAAAA2wACAN8AAgDjAAkA7gAAAPAAHwARAQsAHgEJACkBAQAsAQAALgEBADEBAAA0AQUAQgEAAEoBBgBTAR0AcgEFAHkBAQB8AQAAfgEFAIgBAgCSARYAqwEFALUBAgDAAQIAxAESAA=="}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
